# kubectl create secret docker-registry <pull_secret_name> \
#     --docker-server=<registry_server> \
#     --docker-username=<user_name> \
#     --docker-password=<password> \
#     --docker-email=<email>

global:
  postgresql:
    enabled: true
    overrideUrl: ""
    auth:
      existingSecret: ""
      secretKeys:
        adminPasswordKey: ""
enabled: true
additionalLabels:
onprem:
  enabled: true
origin:
  registry: quay.io/groundcover
  tag: 1.5.5
serviceAccount:
  annotations:
repository: router
ingress:
  enabled: false
ingresses:
# - name: router-frontend-ingress
#   ingressClassName: {lb class}
#   annotations:
#   hosts:
#     - host: <DOMAIN>
#       paths:
#         - path: /
#           pathType: Prefix
#           port: 8080
imagePullSecrets: []
configuration:
  requestTimeout: 20s
  slowRequestThreshold: 3s
  Activity:
    CheckInterval: 5m
    StaleAfter: 30m
  LogLevel: 4
  Reverse: true
  groundcoverVersion: ""
  Portal:
    Host: "portal"
    Port: "5555"
  ListenPort: "8080"
  Auth0:
    RequiredScope: "access:router"
    OrgClaimKey: "https://client.info/org"
    Audience: "https://groundcover"
    Tenant: "auth.groundcover.com"
  RBAC:
    DB:
      Host: '{{ splitList ":" (include "postgresql.base.url" .) | first }}'
      Port: '{{ splitList ":" (include "postgresql.base.url" .) | last }}'
      Name: "rbac"
      User: "postgres"
      Pass: ""
      Timeout: 150s
      Interval: 5s
    Cache:
      ttl: 10m
      PurgeInterval: 20m
      LastSeenExpiration: 5m
    Migrations:
      Path: migrations
  Grafana:
    URL: '{{ printf "http://%s" (include "grafana.fullname" .) }}'
    Username: "admin"
    Password: ""
    DatasourcesURL: "http://router:8080"
    DatasourcesURLTLSSkipVerify: "false"
  OnPrem:
    Enabled: "{{ .Values.onprem.enabled }}"
    ClickHouseHost: ""
    ClickHousePort: ""
    ClickHousePass: ""
  Reporter:
    StoreStatus: false
resources:
  requests:
    cpu: 1000m
    memory: 1024Mi
  limits:
    memory: 2048Mi
    cpu: 1500m
nodeSelector: {}
tolerations: []
postgresql:
  nameOverride: postgresql
  auth:
    database: "grafana"
  tls:
    enabled: true
    autoGenerated: true
  image:
    registry: public.ecr.aws/groundcovercom
  volumePermissions:
    enabled: true
    image:
      registry: public.ecr.aws/groundcovercom
grafana:
  plugins:
    - grafana-clickhouse-datasource
  image:
    repository: public.ecr.aws/groundcovercom/grafana-groundcover
    tag: "v0.0.6-grafana10.0.3"
  testFramework:
    enabled: false
  envValueFrom:
    GF_DATABASE_PASSWORD:
      secretKeyRef:
        name: '{{ include "postgresql.secretName" . }}'
        key: '{{ include "postgresql.adminPasswordKey" . }}'
  grafana.ini:
    live:
      allowed_origins: "*"
    database:
      type: postgres
      host: '{{ (include "postgresql.base.url" .) }}'
      name: grafana
      user: postgres
      password: ""
      ssl_mode: require
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    server:
      serve_from_sub_path: "true"
      root_url: "http://localhost:8080/grafana/"
    security:
      cookie_samesite: disabled
      allow_embedding: true
      cookie_secure: true
      cookie_httponly: true
      csrf_trusted_origins: localhost
    auth.jwt:
      enabled: true
      enable_login_token: true
      header_name: X-Forwarded-Access-Token
      url_login: true
      username_claim: "https://client.info/email"
      email_claim: "https://client.info/email"
      org_claim: "https://client.info/org"
      jwk_set_url: https://auth.groundcover.com/.well-known/jwks.json
      cache_ttl: 60m
      auto_sign_up: false
