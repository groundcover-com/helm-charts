# kubectl create secret docker-registry <pull_secret_name> \
#     --docker-server=<registry_server> \
#     --docker-username=<user_name> \
#     --docker-password=<password> \
#     --docker-email=<email>

global:
  auth:
    type: auth0
  postgresql:
    image:
      registry: public.ecr.aws/groundcovercom
      tag: 15.3.0-debian-11-r75
    enabled: true
    overrideUrl: ""
    auth:
      existingSecret: ""
      secretKeys:
        adminPasswordKey: ""
  monitors:
    enabled: false
enabled: true
additionalLabels:
onprem:
  enabled: true
origin:
  registry: quay.io/groundcover
  repository: router
  tag: 1.7.8
serviceAccount:
  annotations:
ingress:
  enabled: false
ingresses:
# - name: router-frontend-ingress
#   ingressClassName: {lb class}
#   annotations:
#   hosts:
#     - host: <DOMAIN>
#       paths:
#         - path: /
#           pathType: Prefix
#           port: 8080
imagePullSecrets: []
configuration:
  requestTimeout: 20s
  slowRequestThreshold: 3s
  Activity:
    CheckInterval: 5m
    StaleAfter: 30m
  LogLevel: 4
  Reverse: true
  groundcoverVersion: ""
  Portal:
    Host: "portal"
    Port: "5555"
  ListenPort: "8080"
  Auth0:
    RequiredScope: "access:router"
    OrgClaimKey: "https://client.info/org"
    Audience: "https://groundcover"
    Tenant: "auth.groundcover.com"
  RBAC:
    DB:
      Host: '{{ splitList ":" (include "postgresql.base.url" .) | first }}'
      Port: '{{ splitList ":" (include "postgresql.base.url" .) | last }}'
      Name: "rbac"
      User: "postgres"
      Pass: ""
      Timeout: 150s
      Interval: 5s
      SSLMode: "require"
    Cache:
      ttl: 10m
      PurgeInterval: 20m
      LastSeenExpiration: 5m
    Migrations:
      Path: migrations
  Grafana:
    URL: '{{ printf "http://%s" (include "theatre.fullname" .) }}'
    ProxyPath: "/grafana"
    Username: "admin"
    Password: ""
    DatasourcesURL: '{{ include "router.ds.url" . }}'
    DatasourcesURLTLSSkipVerify: "true"
  OnPrem:
    Enabled: "{{ .Values.onprem.enabled }}"
  Reporter:
    StoreStatus: false
  Monitors:
    DB:
      Host: '{{ splitList ":" (include "postgresql.base.url" .) | first }}'
      Port: '{{ splitList ":" (include "postgresql.base.url" .) | last }}'
      Name: "monitors"
      User: "postgres"
      Pass: ""
      Timeout: 150s
      Interval: 5s
      SSLMode: "disable"
resources:
  requests:
    cpu: 1000m
    memory: 1024Mi
  limits:
    memory: 2048Mi
    cpu: 1500m
nodeSelector: {}
tolerations: []
extraEnv: []
kong:
  replicaCount: 1
  image:
    tag: 3.2.2-alpine
    repository: public.ecr.aws/groundcovercom/kong
  admin:
    enabled: true
    type: ClusterIP
  extraLabels:
    app.kubernetes.io/part-of: groundcover
  migrations:
    preUpgrade: false
  env:
    anonymous_reports: "off"
    dump_config: "true"
    headers: "off"
    mem_cache_size: "256m"
    upstream_keepalive_max_requests: "0"
    nginx_http_client_body_buffer_size: "10m"
    nginx_mem_cache_size: "256m"
    database: postgres
    pg_user: postgres
    pg_database: kong
  proxy:
    type: ClusterIP
    http:
      enabled: true
    tls:
      enabled: true
    annotations: {}
  ingressController:
    enabled: true
    admissionWebhook:
      enabled: false
    image:
      tag: 2.9.4
      repository: public.ecr.aws/groundcovercom/kong/kubernetes-ingress-controller
    ingressClass: groundcover-kong
    # annotations for IngressClass resource (Kubernetes 1.18+)
    ingressClassAnnotations: {}
  customEnv:
    KONG_PG_HOST:
      value: '{{ splitList ":" (include "postgresql.base.url" .) | first }}'
    KONG_PG_PORT:
      value: '{{ splitList ":" (include "postgresql.base.url" .) | last }}'
    KONG_PG_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: '{{ include "postgresql.secretName" . }}'
          key: '{{ include "postgresql.adminPasswordKey" . }}'
postgresql:
  nameOverride: postgresql
  auth:
    database: "grafana"
  serviceAccount:
    create: true
  tls:
    enabled: true
    autoGenerated: true
  commonLabels:
    app.kubernetes.io/part-of: groundcover
  volumePermissions:
    enabled: true
    image:
      registry: public.ecr.aws/groundcovercom
      tag: 11-debian-11-r19
  primary:
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    initdb:
      scripts:
        create-dbs.sh: |
          #!/bin/sh
          set -e

          export PGPASSWORD=${POSTGRES_PASSWORD}
          createdb -U postgres kong
          createdb -U postgres rbac
          createdb -U postgres monitors
grafana:
  nameOverride: grafana
  extraLabels:
    app.kubernetes.io/part-of: groundcover
  plugins: []
  image:
    registry: public.ecr.aws
    repository: groundcovercom/grafana-groundcover
    tag: v0.0.13-grafana10.1.2
  testFramework:
    enabled: false
  envValueFrom:
    GF_DATABASE_PASSWORD:
      secretKeyRef:
        name: '{{ include "postgresql.secretName" . }}'
        key: '{{ include "postgresql.adminPasswordKey" . }}'
  grafana.ini:
    live:
      allowed_origins: "*"
    database:
      type: postgres
      host: '{{ (include "postgresql.base.url" .) }}'
      name: grafana
      user: postgres
      ssl_mode: require
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /usr/share/grafana/plugins
      provisioning: /etc/grafana/provisioning
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    server:
      serve_from_sub_path: "true"
      root_url: "http://localhost:8080/grafana/"
    security:
      cookie_samesite: disabled
      allow_embedding: true
      cookie_secure: true
      cookie_httponly: true
      csrf_trusted_origins: localhost
    auth.jwt:
      enabled: true
      enable_login_token: true
      header_name: X-Forwarded-Access-Token
      url_login: true
      username_claim: "https://client.info/email"
      email_claim: "https://client.info/email"
      org_claim: "https://client.info/org"
      key_file: '{{ ternary "/certs/public_key.pem" "" (eq .Values.global.auth.type "no-auth") }}'
      jwk_set_url: '{{ ternary "https://auth.groundcover.com/.well-known/jwks.json" "" (eq .Values.global.auth.type "auth0") }}'
      cache_ttl: 60m
      auto_sign_up: false
  extraSecretMounts:
    - name: certs
      mountPath: /certs
      secretName: groundcover-jwt
      readOnly: true
      subPath: ""
  extraInitContainers:
    - name: wait-for-db
      image: '{{ include "postgresql.image" . }}'
      env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: '{{ include "postgresql.secretName" . }}'
              key: '{{ include "postgresql.adminPasswordKey" . }}'
      command:
        - /bin/sh
        - -c
      args:
        - |
          pg_isready \
            -U "postgres" \
            -d "dbname=postgres" \
            -h {{ splitList ":" (include "postgresql.base.url" .) | first }} \
            -p {{ splitList ":" (include "postgresql.base.url" .) | last }}
