global:
  groundcover_token:
  # groundcover_token is preceding groundcoverPredefinedTokenSecret, make sure its empty if using existing secret
  # if the secret is preloaded in the namespace, you can refer it here instead
  # example for a preloaded secret :
  # apiVersion: v1
  # kind: Secret
  # metadata:
  #   name: <secretName>
  # stringData:
  #   <secretKey>: <apikey>
  # type: Opaque
  groundcoverPredefinedTokenSecret:
    # the name of the secret
    secretName:
    # the key in the secret containing the token value
    secretKey:

metrics:
  enabled: true

logging:
  enabled: true
  host: logs.groundcover.com
  scheme: https

# SAAS parameters, token is mendatory, others only if in cloud mode
saas:
  tls_skip_verify: false
  scheme: wss
  host: app.groundcover.com
  port: 443

#GENERAL
clusterId:
region:

origin:
  registry: public.ecr.aws/k8g4n2c4
  tag: 0.28.2

pullSecrets: []

agent:
  additionalLabels:
  podLabels:
  additionalAnnotations:
  podAnnotations:
  tolerations: []
  affinity:
  nodeSelector:
  priorityClassName:
  alligator:
    repository: alligator
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
      limits:
        memory: 350Mi
        cpu: 500m
    obfuscateData: false
    dataRetention: 2h
  tracy:
    repository: tracy
    resources:
      requests:
        memory: 512Mi
        cpu: 125m
      limits:
        memory: 2048Mi
        cpu: 750m
  promtail:
    repository: promtail
    resources:
      requests:
        cpu: 40m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  flb:
    resources:
      requests:
        cpu: 20m
        memory: 32Mi
      limits:
        cpu: 100m
        memory: 64Mi
        
  fetchLinuxHeaders:
    repository: fetch-linux-headers

migrator:
  additionalLabels:
  podLabels:
  additionalAnnotations:
  podAnnotations:
  affinity:
  nodeSelector:
  tolerations: 
  priorityClassName:
  resetDB: "false" # must be string
  repository: migrator

k8sWatcher:
  repository: k8s-watcher

portal:
  additionalLabels:
  podLabels:
  additionalAnnotations:
  podAnnotations:
  affinity:
  nodeSelector:
  tolerations: []
  priorityClassName:
  repository: portal

loki:
  affinity:

  nodeSelector:

  tolerations: []

  podLabels: {}

  ## StatefulSet annotations
  annotations: {}

  resources:
    requests:
      cpu: 250m
      memory: 750Mi
    limits:
      memory: 3000Mi
      cpu: 1000m

  persistence:
    enabled: true
    size: 10Gi
    annotations: {}
    storageClassName:
    # -- Use this to override the prefix for the pvc, the suffix is auto-generated by k8s according to the pod name
    pvcNameOverride:
  
  config:
    table_manager:
      retention_period: 2h

  service:
    annotations: {}
    labels: {}
    clusterIP:

  priorityClassName:

grafana:
  additionalLabels:
  podLabels:
  additionalAnnotations:
  podAnnotations:
  enabled: true
  nameOverride:
  repository: grafana
  storageClassName:
  affinity:
  nodeSelector:
  tolerations: []
  priorityClassName:
  resources:
    requests:
      cpu: 250m
      memory: 750Mi
    limits:
      memory: 1000Mi
      cpu: 1000m
  clusterIP:

router:
# onprem or cloud
  mode: cloud
  enabled: false
  additionalLabels:
  additionalAnnotations:
  repository: router
  origin:
    registry: public.ecr.aws/k8g4n2c4
    tag: 0.28.2
  versionDb:
    host: 
    port: 
    name: 
    user: 
    password:
  versionBucket:
    name:
    path:
    region:

# These are the recomendded presets
# if you are after an uninstallation, prior to re-installation make sure
# you've deleted the pvcs:  kubectl delete pvc wal-volume-<release-name>-groundcover-tsdb-0  server-volume-<release-name>-groundcover-tsdb-0 
# you've deleted the endpoints:
# kubectl delete svc <release_name>-config
# kubectl delete endpoints <release_name>
# if you installed groundcover in its own namespace, deleting the namespace can done instead
timescaledb-single:
  tolerations: []
  podAnnotations: {}
  nodeSelector: {}
  #affinity: {} 
  # -- Name of Priority Class
  priorityClassName:
  service:
    primary:
      lables: {}
      annotations: {}
      clusterIP:
  persistentVolumes:
    data:
      storageClass:
      size: 100Gi
      annotations: {}
      # -- Use this to override the prefix for the pvc, the suffix is auto-generated by k8s according to the pod name
      #pvcNameOverride:
    wal: 
      storageClass:
      size: 10Gi
      annotations: {}
      # -- Use this to override the prefix for the pvc, the suffix is auto-generated by k8s according to the pod name
      #pvcNameOverride: 
  resources:
    requests:
      cpu: 1000m
      memory: 2000Mi
    limits:
      cpu: 1000m
      memory: 2000Mi
  
  job:
    tolerations: []
    nodeSelector: {}
    affinity: {}

  # By default the timescaledb secrets are randomly generated, and are re-using the existing values incase of using `helm upgrade`
  # in case of a re-installation (uninstall and install), the wal-* and storage-* pvcs must be deleted as well.
  # if you are interested in upgrading an existing installation using a different toolkit from helm, that uses helm template,
  # you can state the existing secret, in our vanilla installation its name is groundcover-tsdb-certificate
  secrets:
    credentialsSecretName: "" 

victoria-metrics-single:

  server:
    # -- Data retention period, {amount}[h(ours), d(ays), w(eeks), y(ears)], default is 1 month
    retentionPeriod: 7d
    # -- Sts/Deploy additional labels
    extraLabels: {}
    # -- Pod's additional labels
    podLabels: {}
    # -- Pod's annotations
    podAnnotations: {}

    # -- Name of Priority Class
    priorityClassName:

    service:
      # -- Service annotations
      annotations: {}
      # -- Service labels
      labels: {}
      # -- Service ClusterIP
      clusterIP: None
    
    matchLabels: {}
    
    statefulSet:
      annotations: {}
      # -- Headless service labels
      labels: {}

    persistentVolume:    
      # -- Persistant volume annotations
      annotations: {}

      # -- StorageClass to use for persistent volume. Requires server.persistentVolume.enabled: true. If defined, PVC created automatically
      storageClass:

      # -- Use this to override the prefix for the pvc, the suffix is auto-generated by k8s according to the pod name
      #pvcNameOverride:

      size: 100Gi

    resources:            
      requests:
        cpu: 1000m
        memory: 3000Mi
      limits:
        cpu: 1000m
        memory: 3000Mi

    # -- Node tolerations for server scheduling to nodes with taints. Ref: [https://kubernetes.io/docs/concepts/configuration/assign-pod-node/](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/)
    tolerations: []

    # -- Pod's node selector. Ref: [https://kubernetes.io/docs/user-guide/node-selection/](https://kubernetes.io/docs/user-guide/node-selection/)
    nodeSelector: {}

    # -- Pod affinity
    affinity: {}

rbac:
  labels:
  annotations:

apikey:
  labels:
  annotations:

# These are presets for low resource enviroments
# timescaledb-single:
#   tolerations: []
#   podAnnotations: {}
#   nodeSelector: {}
#   service:
#     primary:
#       lables: {}
#       annotations: {}
#       clusterIP:
#   persistentVolumes:
#     data:
#       storageClass:
#       size: 10Gi
#       annotations: {}
#     wal: 
#       storageClass:
#       size: 50Gi
#       annotations: {}
#   resources:
#     requests:
#       cpu: 500m
#       memory: 1000Mi
#     limits:
#       cpu: 500m
#       memory: 1000Mi

# victoria-metrics-single:

#   server:
#     # -- Sts/Deploy additional labels
#     extraLabels: {}
#     # -- Pod's additional labels
#     podLabels: {}
#     # -- Pod's annotations
#     podAnnotations: {}

#     service:
#       # -- Service annotations
#       annotations: {}
#       # -- Service labels
#       labels: {}
#       # -- Service ClusterIP
#       clusterIP: ""
    
#     statefulSet:
#       annotations: {}
#       # -- Headless service labels
#       labels: {}

#     persistentVolume:    
#       # -- Persistant volume annotations
#       annotations: {}

#       # -- StorageClass to use for persistent volume. Requires server.persistentVolume.enabled: true. If defined, PVC created automatically
#       storageClass:

#       size: 50Gi

#     resources:            
#       requests:
#         cpu: 500m
#         memory: 1000Mi
#       limits:
#         cpu: 500m
#         memory: 1000Mi

#     # -- Node tolerations for server scheduling to nodes with taints. Ref: [https://kubernetes.io/docs/concepts/configuration/assign-pod-node/](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/)
#     tolerations: []

#     # -- Pod's node selector. Ref: [https://kubernetes.io/docs/user-guide/node-selection/](https://kubernetes.io/docs/user-guide/node-selection/)
#     nodeSelector: {}

#     # -- Pod affinity
#     affinity: {}