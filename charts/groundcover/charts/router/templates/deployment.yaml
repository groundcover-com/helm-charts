{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: router
    app.kubernetes.io/name: router
    {{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 4 }}
    {{- end }}
  annotations:
    groundcover_version: {{ .Values.origin.tag }}
  name: router
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: router
  template:
    metadata:
      labels:
        app: router
        app.kubernetes.io/name: router
      {{- if .Values.additionalLabels }}
{{ toYaml .Values.additionalLabels | indent 8 }}
      {{- end }}
      annotations:
        groundcover_version: {{ .Values.origin.tag }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
    spec:
      serviceAccountName: router
      {{- if .Values.onprem.enabled }}
      initContainers:
        - name: check-grafana-is-up   
          args:
          - while [ $(curl -skw '%{http_code}' http://{{ include "grafana.fullname" . }}/grafana/healthz
            -o /dev/null) -ne 200 ]; do echo 'Waiting for grafana...'; sleep 2; done; echo grafana is up
          command:
            - /bin/sh
            - -c
          image: '{{ printf "%s/curl:latest" .Values.origin.registry }}'
        - name: check-psql-is-up   
          args:
          - pg_isready -U "postgres" -d "dbname=postgres" -h {{ splitList ":" (include "postgresql.base.url" .) | first }} -p {{ splitList ":" (include "postgresql.base.url" .) | last }}
          command:
            - /bin/sh
            - -c
          image: '{{ printf "%s/bitnami/postgresql:15.3.0-debian-11-r75" .Values.postgresql.image.registry }}'
          env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: '{{ include "postgresql.secretName" . }}'
                key: '{{ include "postgresql.adminPasswordKey" . }}'
      {{- end }}
      imagePullSecrets: {{ include "router.imagePullSecrets" . }}
      containers:
        - name: router
          image: {{ .Values.origin.registry }}/{{ .Values.repository }}:{{ .Values.origin.tag }}
          imagePullPolicy: Always
          volumeMounts:
            - name: config-volume
              mountPath: /config
          ports:
            - containerPort: 8080
              name: frontend
              protocol: TCP
            - containerPort: 9102
              name: prom-metrics
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- if and .Values.global .Values.global.clickhouse }}
            - name: GC_ONPREM_CLICKHOUSEPASS
              value: {{ include "clickhouse.password" . | quote }}
            - name: GC_ONPREM_CLICKHOUSEPORT
              value: {{ .Values.global.clickhouse.containerPorts.http | quote }}
            - name: GC_ONPREM_CLICKHOUSEHOST
              value: {{ include "clickhouse.fullname" . | quote }}
            {{- end }}
            {{- if and .Values.onprem.enabled }}
            - name: GC_GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "grafana.fullname" . }}
                  key: "admin-password"
            - name: GC_RBAC_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.secretName" . }}
                  key: {{ include "postgresql.adminPasswordKey" . }}
            {{- end }}
            - name: GIN_MODE
              value: "release"
            - name: GC_GROUNDCOVERVERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['groundcover_version']
            - name: ROUTER_VERSION
              value: "{{ .Values.origin.tag }}"
            - name: ROUTER_SENTRY_DSN
              value: "{{ .Values.sentryDsn }}"
          readinessProbe:
            httpGet:
              path: /health
              port: frontend
            initialDelaySeconds: 5
            periodSeconds: 15
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /health
              port: frontend
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5     
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}     
{{- end }}
      volumes:
        - name: config-volume
          configMap:
            name: router-config
{{ end -}}