{{ if and .Values.global.agent.enabled (eq (include "telemetry.enabled" .) "true") }}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "groundcover.labels" . | nindent 4 }}
    {{- if .Values.agent.additionalLabels }}
{{ toYaml .Values.agent.additionalLabels | indent 4 }}
    {{- end }}
  annotations:
    groundcover_version: {{ default .Chart.AppVersion .Values.global.origin.tag }}
    {{- if .Values.agent.additionalAnnotations }}
{{ toYaml .Values.agent.additionalAnnotations | indent 4 }}
    {{- end }}
  name: fluent-bit-config
  namespace: {{ .Release.Namespace }}
data:
  custom_parsers.conf: |
    [PARSER]
        Name severity
        Format regex
        Regex .*(?<severity>(?i)PANIC|ERROR|WARNING|WARN|INFO|DEBUG|TRACE).*
  fluent-bit.conf: |
    [SERVICE]
        Daemon Off
        Flush 1
        Log_Level warning
        Parsers_File parsers.conf
        Parsers_file custom_parsers.conf
        HTTP_Server On
        HTTP_Listen {{ .Values.agent.flb.bindAddress }}
        HTTP_Port 2020
        Health_Check On

    [INPUT]
        Name tail
        Tag kube.*
        Mem_Buf_Limit 5MB
        Skip_Long_Lines On
        multiline.parser docker, cri
        Exclude_Path *fluent-bit*.log
        Path /var/log/containers/*_${GC_RUNNINGNAMESPACE}_*.log

    [FILTER]
        Name parser
        Match kube.*
        Key_Name log
        Parser severity
        Reserve_Data On
        Preserve_Key On

    [FILTER]
        Name kubernetes
        Match kube.*
        Merge_Log On
        Keep_Log Off
        Labels On
        Annotations Off
        K8S-Logging.Parser On
        K8S-Logging.Exclude On
    
    [FILTER]
        Name record_modifier
        Match *
        Record clusterId ${GC_CLUSTER_ID}
        Record version ${GC_GROUNDCOVERVERSION}

    [OUTPUT]
        Name opentelemetry
        Match *
        Host {{ get (urlParse (include "telemetry.logs.url" .)) "host" }}
        Logs_uri {{ get (urlParse (include "telemetry.logs.url" .)) "path" }}
        Port {{ default 443 (get (urlParse (include "telemetry.logs.url" .)) "port") }}
        Tls {{ eq (get (urlParse (include "telemetry.logs.url" .)) "scheme") "https" | ternary "On" "Off" }}
        Tls.verify Off
        Header apikey ${API_KEY}
        Log_response_payload Off
{{ end }}
