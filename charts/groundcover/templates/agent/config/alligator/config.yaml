{{ if .Values.global.agent.enabled }}
apiVersion: v1
data:
  config.yaml: |-
    startuptimeout: 120s
    concurrency: 200
    productchansize: 512
    pushsummaries: true
    productmetricsflushmintotalcounter:
      http: 5
      redis: 5
      sql: 5
      kafka: 5
      dns: 5
      node_info: 2
      container_crash: 1
      container_info: 1
      container_state: 1
      pvc_info: 1
      grpc: 5
    tracyEnabled: {{ template "agent.tracy.enabled" . }}
    tracy:
      address: "ipc:///comm/tracy.data"
      timeout: 120s
      interval: 5s

    httphandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096
      payloadSizeLimit: 10240 # 10kB

    grpchandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096
      payloadSizeLimit: 10240 # 10kB

    redishandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096
      payloadSizeLimit: 10240 # 10kB

    sqlhandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096
      payloadSizeLimit: 10240 # 10kB

    kafkahandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 10
        samplingLimitAgeOut: 1s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096
      payloadSizeLimit: 10240 # 10kB

    dnshandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 10
        samplingLimitAgeOut: 1s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 300

    mongodbhandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096

    containerInfoHandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096

    pvcIoHandler:
      sampling:
        samplingmode: 0 # DontSample
      interval: 10s
      summarizerActiveTtl: 90s
      aggregationCacheSize: 4096

    containerStateHandler:
      samplesthreshold: 10
      issuesthreshold: 10
      sampling:
        samplingmode: 0 # DontSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 4096
    
    nodeinfohandler:
      samplesthreshold: 20
      issuesthreshold: 20
      sampling:
        samplingmode: 0 # DontSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 1m0s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 1024

    containercrashhandler:
      samplesthreshold: 20
      issuesthreshold: 20
      sampling:
        samplingmode: 1 # DefaultSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 30s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 1024

    pvcinfohandler:
      samplesthreshold: 20
      issuesthreshold: 20
      sampling:
        samplingmode: 0 # DontSample
        samplingLimitMaxQueue: 0
        samplingLimitAgeOut: 0s
      interval: 1m0s
      summarizerActiveTtl: 45s
      aggregationCacheSize: 1024

    timeseriesstorage:
      url: {{ include "metrics-ingester.base.http.internalUrl" . }}
      tlsskipverify: true

    pidcache:
      expiration: 5m
      purge: 20s

    cluster:
      maxhosts: 10000
      maxchildrens: 40

    storage:
      timeout: 5s

    loglevel: 4 # INFO

    isk8s: true
    hostmodeconfigpath: "/config/instance_metadata.yaml"

    allowedportspercontainer: 20
    kubeletmetricsfetchinterval: 15s

    globallimiter:
      maxqueue: 20
      ageout: 100ms
      sampleeverything: false

    obfuscateData: {{ .Values.agent.alligator.obfuscateData }}
    dataRetention: {{ .Values.agent.alligator.dataRetention }}
    watchOnlyLocalNode: {{ .Values.agent.alligator.watchOnlyLocalNode }}
    floraEnabled: {{ ne .Values.mode "legacy" }}
    runningNamespace: ""
    shouldDropRunningNamespaces: {{ .Values.shouldDropRunningNamespaces }}
    tracesNamespaceFilters: {{ toYaml .Values.tracesNamespaceFilters | nindent 6 }}
    tracesWorkloadFilters: {{ toYaml .Values.tracesWorkloadFilters | nindent 6 }}
    nodelabels: {{ toYaml .Values.agent.alligator.nodelabels | nindent 6 }}
    contentTypesToDrop: {{ toYaml .Values.agent.alligator.contentTypesToDrop | nindent 6 }}
    apmIngestor: 
      collector:
        endpoint: {{ include "opentelemetry-collector.otlp.grpc.url" . }}
        enableTLS: {{ include "opentelemetry-collector.otlp.tls.enabled" . }}
        writeTimeout: 10s
        batchSize: 100
        flushInterval: 30s
      dataDog:
        enabled: {{ .Values.agent.alligator.apmIngestor.dataDog.enabled }}
        endpoint: {{ include "opentelemetry-collector.datadogapm.base.http.url" . }}
        tracesPort: {{ .Values.agent.alligator.apmIngestor.dataDog.tracesPort }}
      otel:
        enabled: {{ .Values.agent.alligator.apmIngestor.otel.enabled }}
    pprofAlligator:
      enabled: {{ include "telemetry.enabled" . }}
      interval: {{ .Values.agent.alligator.pprofAlligator.interval }}
      exponent: {{ .Values.agent.alligator.pprofAlligator.exponent }}
      cpuSamplingDuration: {{ .Values.agent.alligator.pprofAlligator.cpuSamplingDuration }}
      httpUploader:
        enabled: {{ eq .Values.agent.alligator.pprofAlligator.uploaderType "http" }}
        pushURL: {{ printf "%s/upload/pprof" (include "telemetry.metrics.base.url" .) }}
      pyroscopeUploader:
        enabled: {{ eq .Values.agent.alligator.pprofAlligator.uploaderType "pyroscope" }}
        pushURL: {{ include "telemetry.metrics.base.url" . }}

    clusterId: {{ include "groundcover.clusterId" . }}
    region: {{ .Values.region }}

    k8sLogs:
      scraper:
        positionsFile: "/var/run/positions/positions.yaml"
        positionsSyncInterval: 10s
        targetSyncInterval: 10s
      clients:
      - name: "logs_client"
        enabled: true
        urlText: {{ include "opentelemetry-collector.loki.http.url" . }}
        useApiKey: true
        batchwait: 2500ms
        batchsize: 10485760
        client:
          tlsconfig:
            insecureSkipVerify: true
        backoffConfig:
          minBackoff: 500ms
          maxBackoff: 5m
          maxRetries: 10
        externalLabels:
          labelSet:
            cluster_id: {{ include "groundcover.clusterId" . }}
            job: alligator
        timeout: 10s
        useRingBuffer: {{ .Values.storeIssuesLogsOnly }}
        filterRunningNamespace: true
        groundcoverTimeTravel: -20s
        logDropFilters: {{ toYaml .Values.logsDropFilters | nindent 10}}
        metricateLabels: false
        multiLineConfigs: {{ toYaml .Values.logsMultiLines | nindent 10}}
        decolorize: {{ .Values.decolorizeLogs }}
    otlp:
      endpoint: {{ include "opentelemetry-collector.otlp.grpc.url" . }}
      enableTLS: {{ include "opentelemetry-collector.otlp.tls.enabled" . }}
      writeTimeout: 10s
      batchSize: 350
      flushInterval: 1s
    
    mySqlConfig:
      Cache: false
      KeepSQLAlias: true
      ReplaceDigits: true
    
    postgreSqlConfig:
      DBMS: "postgresql"
      Cache: false
      KeepSQLAlias: true
      ReplaceDigits: true
kind: ConfigMap
metadata:
  labels:
    {{- include "groundcover.labels" . | nindent 4 }}
    {{- if .Values.agent.additionalLabels }}
{{ toYaml .Values.agent.additionalLabels | indent 4 }}
    {{- end }}
  annotations:
    groundcover_version: {{ default .Chart.AppVersion .Values.global.origin.tag }}
    {{- if .Values.agent.additionalAnnotations }}
{{ toYaml .Values.agent.additionalAnnotations | indent 4 }}
    {{- end }}
  name: alligator-configuration
  namespace: {{ .Release.Namespace }}
{{ end }}
