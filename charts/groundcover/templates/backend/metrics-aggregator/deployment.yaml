{{ if and .Values.global.metricsAggregator.enabled .Values.global.backend.enabled }}
{{- $sensorValues := deepCopy .Values.metricsAggregator -}}
{{- $sensorValues = mergeOverwrite $sensorValues (default (dict) .Values.global.metricsAggregator) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    groundcover_version: {{ default .Chart.AppVersion .Values.global.origin.tag }}
    {{- if $sensorValues.additionalAnnotations }}
{{ toYaml $sensorValues.additionalAnnotations | indent 4 }}
    {{- end }}    
  labels:
    {{- include "groundcover.labels" . | nindent 4 }}
    app: metrics-aggregator
    app.kubernetes.io/name: metrics-aggregator
    {{- if $sensorValues.additionalLabels }}
{{ toYaml $sensorValues.additionalLabels | indent 4 }}
    {{- end }}
  name: {{ include "metrics-aggregator.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metrics-aggregator
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ (include "metrics-aggregator.monitoring.port" .) | quote }}
        groundcover_version: {{ default .Chart.AppVersion .Values.global.origin.tag }}
        checksum/config: {{ include (print $.Template.BasePath "/backend/metrics-aggregator/config/config.yaml") . | sha256sum }}
        {{- if $sensorValues.additionalAnnotations }}
{{ toYaml $sensorValues.additionalAnnotations | indent 8 }}
        {{- end }}
        {{- if $sensorValues.podAnnotations }}
{{ toYaml $sensorValues.podAnnotations | indent 8 }}
        {{- end }}
      labels:
        app: metrics-aggregator
        app.kubernetes.io/name: metrics-aggregator
        {{- include "groundcover.labels" . | nindent 8 }}
        {{- if $sensorValues.additionalLabels }}
{{ toYaml $sensorValues.additionalLabels | indent 8 }}
        {{- end }}
        {{- if $sensorValues.podLabels }}
{{ toYaml $sensorValues.podLabels | indent 8 }}
        {{- end }}
    spec: 
{{- if $sensorValues.tolerations }}
      tolerations:
{{ toYaml $sensorValues.tolerations | indent 8 }}
{{- end }}
{{- if $sensorValues.affinity }}
      affinity:
{{ toYaml $sensorValues.affinity | indent 8 }}
{{- end }}
{{- if $sensorValues.nodeSelector }}
      nodeSelector:
{{ toYaml $sensorValues.nodeSelector | indent 8 }}
{{- end }}
      imagePullSecrets: {{ include "imagePullSecrets" . }}
{{- if $sensorValues.topologySpreadConstraints }}
      topologySpreadConstraints:
{{ toYaml $sensorValues.topologySpreadConstraints | indent 8 }}
{{- end }}
      containers:
      - env:
        - name: GC_RUNNINGNAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: GC_GROUNDCOVERVERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['groundcover_version']    
        {{- with $sensorValues.env }}
          {{ tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        {{- with $sensorValues.builtinEnv }}
          {{ tpl (toYaml .) $ | nindent 8 }}
        {{- end }}
        envFrom:
          - secretRef:
              name: {{include "groundcover.config.secretName" .}}
        image: {{ tpl $sensorValues.image.repository . }}:{{ tpl $sensorValues.image.tag . }}
        imagePullPolicy: Always
        name: metrics-aggregator     
        ports:
        - containerPort: {{ (include "metrics-aggregator.monitoring.port" .) | int }}
          name: prom-metrics
        {{- include "groundcover.sensor.deployment.ingestion-ports" (merge (dict "sensorValues" $sensorValues) .) | nindent 8 }}
        {{- if .Values.global.debug.enabled }}
        - containerPort: 4040
          name: dlv-tcp
          protocol: TCP
        {{- end }}
        {{- if $sensorValues.healthProbe.enabled }}
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: health-http
          initialDelaySeconds: 10
          periodSeconds: 15
          failureThreshold: 20
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: health-http
          initialDelaySeconds: 10
          periodSeconds: 15
          failureThreshold: 20
        {{- end }}
        resources:
{{- toYaml $sensorValues.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /config
          name: metrics-aggregator-config-volume
{{- if $sensorValues.priorityClassName }}
      priorityClassName: {{ $sensorValues.priorityClassName }}
{{- end }}
      volumes:
      - configMap:
          name: {{ include "metrics-aggregator.fullname" . }}-config
        name: metrics-aggregator-config-volume
{{ end -}}
