{{ if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    groundcover_version: {{ default .Chart.AppVersion .Values.global.origin.tag }}
    {{- if .Values.dbManager.additionalAnnotations }}
{{ toYaml .Values.dbManager.additionalAnnotations | indent 4 }}
    {{- end }}    
  labels:
    {{ with .Values.global.groundcoverLabels }} 
    {{- toYaml . | nindent 4 }}
    {{- end }}
    app: db-manager
    {{- if .Values.dbManager.additionalLabels }}
{{ toYaml .Values.dbManager.additionalLabels | indent 4 }}
    {{- end }}
  name: db-manager
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: db-manager
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"      
        groundcover_version: {{ default .Chart.AppVersion .Values.global.origin.tag }}
        {{- if .Values.dbManager.additionalAnnotations }}
{{ toYaml .Values.dbManager.additionalAnnotations | indent 8 }}
        {{- end }}
        {{- if .Values.dbManager.podAnnotations }}
{{ toYaml .Values.dbManager.podAnnotations | indent 8 }}
        {{- end }}
      labels:
        app: db-manager
        {{ with .Values.global.groundcoverLabels }} 
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.dbManager.additionalLabels }}
{{ toYaml .Values.dbManager.additionalLabels | indent 8 }}
        {{- end }}
        {{- if .Values.dbManager.podLabels }}
{{ toYaml .Values.dbManager.podLabels | indent 8 }}
        {{- end }}
    spec:
{{- if .Values.dbManager.tolerations }}
      tolerations:
{{ toYaml .Values.dbManager.tolerations | indent 8 }}
{{- end }}
{{- if .Values.dbManager.affinity }}
      affinity:
{{ toYaml .Values.dbManager.affinity | indent 8 }}
{{- end }}
{{- if .Values.dbManager.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.dbManager.nodeSelector | indent 8 }}
{{- end }}
      imagePullSecrets: {{ include "imagePullSecrets" . }}
      containers:
      - env:
        - name: GC_DATARETENTION
          value: "{{ .Values.agent.alligator.dataRetention }}"
        - name: GC_DB_HOST
          value: groundcover-tsdb
        - name: GC_DB_PASS
          valueFrom:
            secretKeyRef:
              key: PATRONI_SUPERUSER_PASSWORD
              name: {{ index .Values "timescaledb-single" "secrets" "credentialsSecretName" | default "groundcover-tsdb-credentials" }}
        - name: GC_RUNNING_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['groundcover_version']
        {{- with .Values.dbManager.env }}
          {{ toYaml . | nindent 8 }}
        {{- end }}
        image: {{ tpl .Values.dbManager.image.repository . }}:{{ default .Chart.AppVersion .Values.global.origin.tag }}
        imagePullPolicy: Always
        name: db-manager     
        ports:
        - containerPort: 9102
          name: manager-metrics        
        resources:
{{- toYaml .Values.dbManager.resources | nindent 10 }}
      initContainers:
      - name: check-ts-ready
        command:
        - sh
        - -c
        - until pg_isready -h groundcover-tsdb -p 5432; do echo Waiting for
          TimescaleDB...; sleep 2; done; echo TimescaleDB is up
        image: {{ .Values.global.origin.registry }}/postgres:9.6.5
      serviceAccountName: db-manager
{{- if .Values.dbManager.priorityClassName }}
      priorityClassName: {{ .Values.dbManager.priorityClassName }}
{{- end }}
      volumes:
      - configMap:
          name: db-manager-config
        name: db-manager-config-volume
{{ end }}