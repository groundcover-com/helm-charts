{{ if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    groundcover_version: {{ .Values.origin.tag }}
    {{- if .Values.portal.additionalAnnotations }}
{{ toYaml .Values.portal.additionalAnnotations | indent 4 }}
    {{- end }}    
  labels:
    app: portal
    {{- if .Values.portal.additionalLabels }}
{{ toYaml .Values.portal.additionalLabels | indent 4 }}
    {{- end }}
  name: portal
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: portal
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9102"
        groundcover_version: {{ .Values.origin.tag }}
        {{- if .Values.portal.additionalAnnotations }}
{{ toYaml .Values.portal.additionalAnnotations | indent 8 }}
        {{- end }}
        {{- if .Values.portal.podAnnotations }}
{{ toYaml .Values.portal.podAnnotations | indent 8 }}
        {{- end }}
      labels:
        app: portal
        {{- if .Values.portal.additionalLabels }}
{{ toYaml .Values.portal.additionalLabels | indent 8 }}
        {{- end }}
        {{- if .Values.portal.podLabels }}
{{ toYaml .Values.portal.podLabels | indent 8 }}
        {{- end }}
    spec:
{{- if .Values.portal.tolerations }}
      tolerations:
{{ toYaml .Values.portal.tolerations | indent 8 }}
{{- end }}
{{- if .Values.portal.affinity }}
      affinity:
{{ toYaml .Values.portal.affinity | indent 8 }}
{{- end }}
{{- if .Values.portal.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.portal.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.pullSecrets | indent 8 }}
{{- end }}
      serviceAccountName: portal
      containers:
      - env:
        - name: GC_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['groundcover_version']
        - name: GC_CLUSTERID
          valueFrom:
            secretKeyRef:
              key: GC_CLUSTER_ID
              name: groundcover-config
        - name: GC_DB_PASS
          valueFrom:
            secretKeyRef:
              key: PATRONI_SUPERUSER_PASSWORD
              name: {{ index .Values "timescaledb-single" "secrets" "credentialsSecretName" | default "groundcover-tsdb-credentials" }}
{{ if eq .Values.router.mode "cloud" }}
        - name: GC_ROUTER_TOKEN
          valueFrom:
            secretKeyRef:
              key: {{ template "groundcover.apikeySecretKey" . }}
              name: {{ template "groundcover.apikeySecretName" . }}
{{ end }}
        image: {{ .Values.origin.registry }}/{{ .Values.portal.repository }}:{{ .Values.origin.tag }}
        imagePullPolicy: Always
        name: portal
        ports:
        - containerPort: 5555
          name: grpc-portal
          protocol: TCP
        - containerPort: 9102
          name: portal-metrics
        - containerPort: 9999
          name: portal-health
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: portal-health
          initialDelaySeconds: 5
          periodSeconds: 15
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: portal-health
          initialDelaySeconds: 5
          periodSeconds: 15
          timeoutSeconds: 5  
        resources:
{{- toYaml .Values.portal.resources | nindent 10 }}
        volumeMounts:
        - mountPath: /config
          name: portal-config-volume
      initContainers:
      - name: check-promscale-ready
        image: public.ecr.aws/groundcovercom/curl:latest
        command:
          - /bin/sh
          - -c
        args:
            - while [ $(curl -sw '%{http_code}' -k https://groundcover-promscale-connector:9201/healthz -o /dev/null) -ne 200 ]; do echo 'Waiting for promscale...'; sleep 2; done; echo promscale is up
      - args:
        - while [ $(curl -sw '%{http_code}' http://groundcover-victoria-metrics:8428/health
          -o /dev/null) -ne 200 ]; do echo 'Waiting for VictoriaMetrics...'; sleep
          2; done; echo VictoriaMetrics is up
        command:
        - /bin/sh
        - -c
        image: public.ecr.aws/groundcovercom/curl:latest
        name: check-vm-ready
      - args:
        - while [ $(curl -sw '%{http_code}' http://groundcover-loki:3100/ready
          -o /dev/null) -ne 200 ]; do echo 'Waiting for Loki...'; sleep
          2; done; echo Loki is up
        command:
        - /bin/sh
        - -c
        image: public.ecr.aws/groundcovercom/curl:latest
        name: check-loki-ready
{{- if .Values.portal.priorityClassName }}
      priorityClassName: {{ .Values.portal.priorityClassName }}
{{- end }}
      volumes:
      - configMap:
          name: portal-config
        name: portal-config-volume
{{ end -}}
